// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Commerce.Services.PricingMdm.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Commerce.Services.PricingMdm.Api.Migrations
{
    [DbContext(typeof(PricingDbContext))]
    [Migration("20250915183606_AddMissingCatalogProductFields")]
    partial class AddMissingCatalogProductFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.BasePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("approval_status");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("approved_by");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid")
                        .HasColumnName("catalog_id");

                    b.Property<decimal?>("CostPrice")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("list_price");

                    b.Property<decimal?>("MarginPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("margin_percentage");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("max_quantity");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("min_quantity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("EffectiveFrom", "EffectiveTo");

                    b.HasIndex("CatalogId", "ProductId", "EffectiveFrom")
                        .IsUnique();

                    b.ToTable("base_prices", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<Guid>("MarketSegmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("market_segment_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MarketSegmentId");

                    b.HasIndex("RegionId", "MarketSegmentId")
                        .IsUnique();

                    b.ToTable("catalogs", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.CatalogProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid")
                        .HasColumnName("catalog_id");

                    b.Property<string>("ContentWorkflowStatus")
                        .HasColumnType("text")
                        .HasColumnName("content_workflow_status");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percentage");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LocaleWorkflowStatus")
                        .HasColumnType("text")
                        .HasColumnName("locale_workflow_status");

                    b.Property<decimal?>("OverridePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("override_price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string[]>("SelectedLocales")
                        .HasColumnType("text[]")
                        .HasColumnName("selected_locales");

                    b.Property<string>("Sku")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("WorkflowCompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("workflow_completed_at");

                    b.Property<DateTime?>("WorkflowInitiatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("workflow_initiated_at");

                    b.Property<string>("WorkflowInitiatedBy")
                        .HasColumnType("text")
                        .HasColumnName("workflow_initiated_by");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ProductId");

                    b.HasIndex("CatalogId", "ProductId")
                        .IsUnique();

                    b.ToTable("catalog_products", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code");

                    b.Property<string>("Continent")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("continent");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("DefaultLocaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_locale_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("native_name");

                    b.Property<string>("PhonePrefix")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phone_prefix");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<bool>("SupportsBilling")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_billing");

                    b.Property<bool>("SupportsShipping")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_shipping");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DefaultLocaleId");

                    b.HasIndex("RegionId");

                    b.ToTable("countries", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.CountryCompliance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ComplianceRiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("compliance_risk_level");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("HasExportRestrictions")
                        .HasColumnType("boolean")
                        .HasColumnName("has_export_restrictions");

                    b.Property<bool>("HasTradeSanctions")
                        .HasColumnType("boolean")
                        .HasColumnName("has_trade_sanctions");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastRiskAssessment")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_risk_assessment");

                    b.Property<string>("RegulatoryNotes")
                        .HasColumnType("text")
                        .HasColumnName("regulatory_notes");

                    b.Property<bool>("RequiresDeniedPartyScreening")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_denied_party_screening");

                    b.Property<bool>("RequiresExportLicense")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_export_license");

                    b.Property<List<string>>("RestrictedCategories")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("restricted_categories");

                    b.Property<decimal?>("ScreeningThresholdAmount")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("screening_threshold_amount");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text")
                        .HasColumnName("special_requirements");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode")
                        .IsUnique();

                    b.ToTable("country_compliance", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("integer")
                        .HasColumnName("decimal_places");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("currencies", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.IpCountryRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IpEnd")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_end");

                    b.Property<string>("IpStart")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_start");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Provider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("provider");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode", "IpStart", "IpEnd");

                    b.ToTable("ip_country_ranges", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Locale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("country_code");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("date_format");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rtl");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("native_name");

                    b.Property<string>("NumberFormat")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("number_format");

                    b.Property<int>("PriorityInCountry")
                        .HasColumnType("integer")
                        .HasColumnName("priority_in_country");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("RegionId", "Code")
                        .IsUnique();

                    b.ToTable("locales", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.MarketSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("market_segments", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sku");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("products", "averis_product");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.ProductContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<string[]>("Benefits")
                        .HasColumnType("text[]")
                        .HasColumnName("benefits");

                    b.Property<int>("ContentVersion")
                        .HasColumnType("integer")
                        .HasColumnName("content_version");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string[]>("Features")
                        .HasColumnType("text[]")
                        .HasColumnName("features");

                    b.Property<string[]>("Keywords")
                        .HasColumnType("text[]")
                        .HasColumnName("keywords");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("locale_id");

                    b.Property<string>("MarketingCopy")
                        .HasColumnType("text")
                        .HasColumnName("marketing_copy");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("text")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("TechnicalSpecs")
                        .HasColumnType("text")
                        .HasColumnName("technical_specs");

                    b.Property<string>("TranslationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translation_status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId", "LocaleId")
                        .IsUnique();

                    b.ToTable("product_locale_content", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.ProductLocaleFinancial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("BaseCost")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("base_cost");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("base_price");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid")
                        .HasColumnName("catalog_id");

                    b.Property<DateTime?>("ConversionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("conversion_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("CurrencyConversionRate")
                        .HasPrecision(15, 6)
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("currency_conversion_rate");

                    b.Property<JsonDocument>("DisplayFormat")
                        .HasColumnType("jsonb")
                        .HasColumnName("display_format");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<decimal?>("EnvironmentalFees")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("environmental_fees");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal?>("LocalCost")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("local_cost");

                    b.Property<decimal?>("LocalPrice")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("local_price");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("locale_id");

                    b.Property<JsonDocument>("PriceRoundingRules")
                        .HasColumnType("jsonb")
                        .HasColumnName("price_rounding_rules");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("PromotionEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("promotion_end_date");

                    b.Property<DateTime?>("PromotionStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("promotion_start_date");

                    b.Property<decimal?>("PromotionalPrice")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("promotional_price");

                    b.Property<decimal?>("RegulatoryFees")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("regulatory_fees");

                    b.Property<decimal?>("TaxAmount")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal?>("TaxIncludedPrice")
                        .HasPrecision(15, 4)
                        .HasColumnType("numeric(15,4)")
                        .HasColumnName("tax_included_price");

                    b.Property<decimal?>("TaxRate")
                        .HasPrecision(8, 4)
                        .HasColumnType("numeric(8,4)")
                        .HasColumnName("tax_rate");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("LocaleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("EffectiveFrom", "EffectiveTo");

                    b.HasIndex("ProductId", "LocaleId", "CatalogId")
                        .IsUnique();

                    b.ToTable("ProductLocaleFinancials");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("DefaultCurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_currency_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCurrencyId");

                    b.ToTable("regions", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.UserLocalePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BillingCountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("billing_country_id");

                    b.Property<Guid?>("ChosenCountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_country_id");

                    b.Property<Guid?>("ChosenLocaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_locale_id");

                    b.Property<bool>("ComplianceScreeningRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("compliance_screening_required");

                    b.Property<string>("ComplianceStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("compliance_status");

                    b.Property<bool>("CountryOverridden")
                        .HasColumnType("boolean")
                        .HasColumnName("country_overridden");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DetectedCountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("detected_country_id");

                    b.Property<string>("DetectedIpAddress")
                        .HasColumnType("text")
                        .HasColumnName("detected_ip_address");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("LastScreeningId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_screening_id");

                    b.Property<bool>("LocaleOverridden")
                        .HasColumnType("boolean")
                        .HasColumnName("locale_overridden");

                    b.Property<string>("Referrer")
                        .HasColumnType("text")
                        .HasColumnName("referrer");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("session_id");

                    b.Property<Guid?>("ShippingCountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipping_country_id");

                    b.Property<Guid?>("ShoppingCountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("shopping_country_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BillingCountryId");

                    b.HasIndex("ChosenCountryId");

                    b.HasIndex("ChosenLocaleId");

                    b.HasIndex("DetectedCountryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("ShippingCountryId");

                    b.HasIndex("ShoppingCountryId");

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("user_locale_preferences", "averis_pricing");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.BasePrice", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Catalog", "Catalog")
                        .WithMany("BasePrices")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Product", "Product")
                        .WithMany("BasePrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Catalog", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Currency", "Currency")
                        .WithMany("Catalogs")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.MarketSegment", "MarketSegment")
                        .WithMany("Catalogs")
                        .HasForeignKey("MarketSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Region", "Region")
                        .WithMany("Catalogs")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("MarketSegment");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.CatalogProduct", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Catalog", "Catalog")
                        .WithMany("CatalogProducts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Product", "Product")
                        .WithMany("CatalogProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Country", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Locale", "DefaultLocale")
                        .WithMany()
                        .HasForeignKey("DefaultLocaleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultLocale");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.CountryCompliance", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "Country")
                        .WithOne("ComplianceProfile")
                        .HasForeignKey("Commerce.Services.PricingMdm.Api.Models.CountryCompliance", "CountryCode")
                        .HasPrincipalKey("Commerce.Services.PricingMdm.Api.Models.Country", "Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.IpCountryRange", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Locale", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "Country")
                        .WithMany("Locales")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Currency", "Currency")
                        .WithMany("Locales")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Region", "Region")
                        .WithMany("Locales")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.ProductContent", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Locale", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locale");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.ProductLocaleFinancial", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Locale", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Locale");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Region", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Currency", "DefaultCurrency")
                        .WithMany("RegionsUsingAsDefault")
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DefaultCurrency");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.UserLocalePreference", b =>
                {
                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "BillingCountry")
                        .WithMany()
                        .HasForeignKey("BillingCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "ChosenCountry")
                        .WithMany()
                        .HasForeignKey("ChosenCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Locale", "ChosenLocale")
                        .WithMany()
                        .HasForeignKey("ChosenLocaleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "DetectedCountry")
                        .WithMany()
                        .HasForeignKey("DetectedCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "ShippingCountry")
                        .WithMany()
                        .HasForeignKey("ShippingCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Commerce.Services.PricingMdm.Api.Models.Country", "ShoppingCountry")
                        .WithMany()
                        .HasForeignKey("ShoppingCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BillingCountry");

                    b.Navigation("ChosenCountry");

                    b.Navigation("ChosenLocale");

                    b.Navigation("DetectedCountry");

                    b.Navigation("ShippingCountry");

                    b.Navigation("ShoppingCountry");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Catalog", b =>
                {
                    b.Navigation("BasePrices");

                    b.Navigation("CatalogProducts");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Country", b =>
                {
                    b.Navigation("ComplianceProfile");

                    b.Navigation("Locales");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Currency", b =>
                {
                    b.Navigation("Catalogs");

                    b.Navigation("Locales");

                    b.Navigation("RegionsUsingAsDefault");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.MarketSegment", b =>
                {
                    b.Navigation("Catalogs");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Product", b =>
                {
                    b.Navigation("BasePrices");

                    b.Navigation("CatalogProducts");
                });

            modelBuilder.Entity("Commerce.Services.PricingMdm.Api.Models.Region", b =>
                {
                    b.Navigation("Catalogs");

                    b.Navigation("Countries");

                    b.Navigation("Locales");
                });
#pragma warning restore 612, 618
        }
    }
}
