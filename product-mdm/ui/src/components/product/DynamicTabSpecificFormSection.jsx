/**\n * Dynamic Tab-Specific Form Section\n * Uses data dictionary to dynamically render form fields organized by tabs\n */\nimport React from 'react'\nimport { useDataDictionaryFields } from '../../hooks/useDataDictionaryFields'\nimport CollapsibleSection from '../common/CollapsibleSection'\n\nconst DynamicTabSpecificFormSection = ({ formData, onChange, errors, readOnly = false, tabId }) => {\n  const { \n    fieldsByRole, \n    loading: fieldsLoading, \n    error: fieldsError, \n    getInputType, \n    getValidationRules \n  } = useDataDictionaryFields()\n\n  const handleInputChange = (field, value) => {\n    onChange(field, value)\n  }\n\n  const handleArrayChange = (field, value) => {\n    const arrayValue = value.split(',').map(item => item.trim()).filter(Boolean)\n    onChange(field, arrayValue)\n  }\n\n  const getBooleanValue = (value) => {\n    if (typeof value === 'boolean') return value\n    return value === 'true' || value === true\n  }\n\n  const formatArrayForInput = (array) => {\n    return Array.isArray(array) ? array.join(', ') : ''\n  }\n\n  // Map tab names to roles\n  const tabRoleMapping = {\n    'marketing': 'product_marketing',\n    'finance': 'product_finance',\n    'legal': 'product_legal',\n    'sales': 'product_salesops',\n    'contracts': 'product_contracts'\n  }\n\n  const renderField = (field) => {\n    const fieldId = `${tabId}-${field.columnName}`\n    const hasError = errors[field.columnName]\n    const fieldType = getInputType(field.dataType, field.allowedValues)\n    const value = formData[field.columnName] || ''\n    const hasValue = typeof value === 'boolean' ? true : (value !== null && value !== undefined && value !== '')\n    \n    const baseInputClasses = `block w-full rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white ${\n      hasError \n        ? 'border-red-300 focus:border-red-500 focus:ring-red-500' \n        : field.required && !hasValue\n          ? 'border-amber-300 dark:border-amber-600 focus:border-blue-500 focus:ring-blue-500'\n          : 'border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500'\n    } ${readOnly ? 'bg-gray-50 dark:bg-gray-700 cursor-not-allowed' : ''}`\n\n    const fieldWrapper = (content) => (\n      <div key={field.columnName} className=\"space-y-2\">\n        <label htmlFor={fieldId} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n          {field.displayName}\n          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n        {content}\n        {field.description && (\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">{field.description}</p>\n        )}\n        {field.required && !hasValue && !hasError && (\n          <p className=\"text-xs text-amber-600 dark:text-amber-400\">This field is required</p>\n        )}\n        {hasError && (\n          <p className=\"text-sm text-red-600 dark:text-red-400\">{hasError}</p>\n        )}\n      </div>\n    )\n\n    switch (fieldType) {\n      case 'textarea':\n        return fieldWrapper(\n          <textarea\n            id={fieldId}\n            rows={3}\n            value={value}\n            onChange={(e) => handleInputChange(field.columnName, e.target.value)}\n            placeholder={`Enter ${field.displayName.toLowerCase()}`}\n            disabled={readOnly || !field.isEditable}\n            className={baseInputClasses}\n          />\n        )\n\n      case 'select':\n        const options = field.allowedValues || []\n        return fieldWrapper(\n          <select\n            id={fieldId}\n            value={value}\n            onChange={(e) => handleInputChange(field.columnName, e.target.value)}\n            disabled={readOnly || !field.isEditable}\n            className={baseInputClasses}\n          >\n            <option value=\"\">Select {field.displayName}</option>\n            {options.map(option => (\n              <option key={option} value={option}>{option}</option>\n            ))}\n          </select>\n        )\n\n      case 'checkbox':\n        return fieldWrapper(\n          <label className=\"flex items-center mt-1\">\n            <input\n              type=\"checkbox\"\n              checked={getBooleanValue(value)}\n              onChange={(e) => handleInputChange(field.columnName, e.target.checked)}\n              disabled={readOnly || !field.isEditable}\n              className={`rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 ${\n                readOnly ? 'cursor-not-allowed' : ''\n              }`}\n            />\n            <span className=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n              {getBooleanValue(value) ? 'Yes' : 'No'}\n            </span>\n          </label>\n        )\n\n      case 'number':\n      case 'currency':\n        return fieldWrapper(\n          <input\n            type=\"number\"\n            step={fieldType === 'currency' ? '0.01' : '1'}\n            id={fieldId}\n            value={value}\n            onChange={(e) => handleInputChange(field.columnName, fieldType === 'currency' ? parseFloat(e.target.value) || 0 : parseInt(e.target.value) || 0)}\n            disabled={readOnly || !field.isEditable}\n            placeholder={`Enter ${field.displayName.toLowerCase()}`}\n            className={baseInputClasses}\n          />\n        )\n\n      default: // text input\n        return fieldWrapper(\n          <input\n            type=\"text\"\n            id={fieldId}\n            value={field.columnName === 'categorization' ? formatArrayForInput(value) : value}\n            onChange={(e) => {\n              if (field.columnName === 'categorization') {\n                handleArrayChange(field.columnName, e.target.value)\n              } else {\n                handleInputChange(field.columnName, e.target.value)\n              }\n            }}\n            disabled={readOnly || !field.isEditable}\n            placeholder={`Enter ${field.displayName.toLowerCase()}`}\n            className={baseInputClasses}\n            maxLength={field.maxLength}\n            minLength={field.minLength}\n            pattern={field.validationPattern}\n          />\n        )\n    }\n  }\n\n  if (fieldsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600 dark:text-gray-400 text-sm\">Loading form fields...</p>\n      </div>\n    )\n  }\n\n  if (fieldsError) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-red-600 dark:text-red-400 text-sm\">Error loading form fields: {fieldsError}</p>\n      </div>\n    )\n  }\n\n  // Get role for current tab\n  const roleKey = tabRoleMapping[tabId]\n  if (!roleKey) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500 dark:text-gray-400 text-sm\">No fields found for tab: {tabId}</p>\n      </div>\n    )\n  }\n\n  // Get fields for this role\n  const fields = fieldsByRole[roleKey] || []\n  const systemFields = fieldsByRole['system'] || []\n  \n  // Include system fields on all tabs\n  const allFields = tabId === 'marketing' ? [...fields, ...systemFields] : fields\n\n  if (allFields.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500 dark:text-gray-400 text-sm\">No fields configured for this section</p>\n      </div>\n    )\n  }\n\n  // Group fields by logical sections\n  const groupedFields = {\n    main: allFields.filter(f => !f.isSystemField),\n    system: allFields.filter(f => f.isSystemField)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main fields */}\n      {groupedFields.main.length > 0 && (\n        <CollapsibleSection\n          title={`${roleKey.replace('product_', '').charAt(0).toUpperCase() + roleKey.replace('product_', '').slice(1)} Fields`}\n          defaultOpen={true}\n          variant=\"card\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {groupedFields.main.map(renderField)}\n          </div>\n        </CollapsibleSection>\n      )}\n      \n      {/* System fields */}\n      {groupedFields.system.length > 0 && tabId === 'marketing' && (\n        <CollapsibleSection\n          title=\"System Fields\"\n          defaultOpen={false}\n          variant=\"card\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {groupedFields.system.map(renderField)}\n          </div>\n        </CollapsibleSection>\n      )}\n    </div>\n  )\n}\n\nexport default DynamicTabSpecificFormSection